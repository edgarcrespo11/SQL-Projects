This "Customer & Orders Analytics" project demonstrates my knowledge of SQL querying a database with multiple tables 
in it to quantify statistics and analytics questions about customer and order data. 
The RDBMS called SQLite Studio was used.

-- This first query was done to make sure the data is correct and in order.

SELECT *
FROM customers
WHERE LENGTH (order_id) = 6
AND order_id <> 'Order ID'
;


-- How many orders were placed in January?
SELECT COUNT(orderID)
FROM JanSales
WHERE LENGTH (orderID) = 6
AND orderID <> 'Order ID'
;

-- How many of those orders were for an iPhone?
SELECT COUNT(orderID)
FROM JanSales
WHERE LENGTH (orderID) = 6
AND orderID <> 'Order ID'
AND Product = 'iPhone'
;

-- Select the customer account numbers for all the orders that were placed in February.
SELECT *
FROM customers AS cus
INNER JOIN FebSales AS feb
ON cus.order_id = feb.orderID
WHERE LENGTH (feb.orderID) = 6
AND feb.orderID <> 'Order ID'
;

-- Which product was the cheapest one sold in January, and what was the price?
SELECT DISTINCT MIN(price), Product
FROM JanSales
GROUP BY product, price
ORDER BY price ASC
LIMIT 1
;

-- What is the total revenue for each product sold in January?
SELECT DISTINCT Product, SUM(quantity)*price AS Revenue
FROM JanSales
GROUP BY Product
ORDER BY Revenue ASC
;

-- Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, 
-- how many of each were sold, and what was the total revenue?

SELECT Product, SUM(Quantity) AS Quantity, SUM(Quantity)*price AS Revenue
FROM FebSales
WHERE location = '548 Lincoln St, Seattle, WA 98101'
GROUP BY Product
ORDER BY Revenue ASC
;

-- How many customers ordered more than 2 products at a time in February, and what was the average amount spent 
for those customers?

SELECT COUNT(cus.acctnum) AS Customers_Feb, AVG(feb.Quantity*feb.price) AS Average_Spent
FROM FebSales AS feb
LEFT JOIN customers AS cus
ON feb.orderID = cus.order_id
WHERE feb.Quantity > 2
AND LENGTH (order_id) = 6
AND order_id <> 'Order ID'
;

